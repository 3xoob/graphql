{"version":3,"file":"dataFetching.js","sourceRoot":"","sources":["../../src/app/dataFetching.ts"],"names":[],"mappings":"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","sourcesContent":["import { GET_USER_INFO, GET_TOP_TRANSACTION, GET_AUDIT_STATUS, GET_TOTAL_XP, GET_USER_Technologies, GET_USER_Technical_Skills, GET_AUDIT_RATIO } from './queries';\nimport { IUser, Result, ITopTransaction, IAuditStatus, ITotalXp, IUserSkill, IAuditRatio } from '../types';\n\n// Class to call it in fetching data from the api with the selected queries\nexport class GraphQLService {\n    private apiUrl: string = \"https://learn.reboot01.com/api/graphql-engine/v1/graphql\";\n    #jwt() {\n        return localStorage.getItem(\"jwt\");\n    }\n    async #fetchData(query: string): Promise<Result<object>> {\n        const jwt = this.#jwt()\n        if (!jwt || jwt.split(\".\").length !== 3) {\n            return [null, new Error('Invalid Token')]\n        }\n\n        try {\n            const response = await fetch(this.apiUrl, {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${jwt}`,\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ query }),\n            });\n\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch data.\");\n            }\n\n            const result = await response.json();\n\n            if (result.errors) {\n                throw new Error(\"GraphQL Errors: \" + result.errors.map((error: { message: string }) => error.message).join(\", \"));\n            }\n\n            return [result.data, null]\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error(\"Error fetching data:\", error.message);\n                return [null, error]\n            } else {\n                console.error(\"An unknown error occurred:\", error);\n                return [null, new Error(`An unknown error occurred: ${error}`)]\n            }\n        }\n    }\n\n    public async getUserInfo(): Promise<Result<IUser>> {\n        const [data, error] = await this.#fetchData(GET_USER_INFO);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('user' in data && Array.isArray(data.user)) {\n            return [data.user[0] as IUser, null]\n        }\n        return [null, new Error(\"'user' key not in response\")]\n    }\n\n    public async getTopTransaction(): Promise<Result<ITopTransaction>> {\n        const [data, error] = await this.#fetchData(GET_TOP_TRANSACTION);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('transaction' in data && Array.isArray(data.transaction)) {\n            return [data.transaction[0] as ITopTransaction, null]\n        }\n        return [null, new Error(\"'transaction' key not in response\")]\n    }\n\n    public async getAuditStatus(): Promise<Result<IAuditStatus>> {\n        const [data, error] = await this.#fetchData(GET_AUDIT_STATUS);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('user' in data && Array.isArray(data.user)) {\n            return [data.user[0] as IAuditStatus, null]\n        }\n        return [null, new Error(\"'user_audit' key not in response\")]\n    }\n\n    public async getTotalXP(): Promise<Result<ITotalXp>> {\n        const [data, error] = await this.#fetchData(GET_TOTAL_XP);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('transaction_aggregate' in data) {\n            return [data.transaction_aggregate as ITotalXp, null]\n        }\n        return [null, new Error(\"'transaction_aggregate' key not in response\")]\n    }\n\n    public async getUserTechnologies(): Promise<Result<IUserSkill>> {\n        const [data, error] = await this.#fetchData(GET_USER_Technologies);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('transaction' in data) {\n            return [data.transaction as IUserSkill, null]\n        }\n        return [null, new Error(\"'transaction_skills' key not in response\")]\n    }\n\n    public async getUserTechnicalSkills(): Promise<Result<IUserSkill>> {\n        const [data, error] = await this.#fetchData(GET_USER_Technical_Skills);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('transaction' in data) {\n            return [data.transaction as IUserSkill, null]\n        }\n        return [null, new Error(\"'transaction_skills' key not in response\")]\n    }\n\n    public async getAuditRatio(): Promise<Result<IAuditRatio>> {\n        const [data, error] = await this.#fetchData(GET_AUDIT_RATIO);\n        if (error !== null) {\n            return [null, error]\n        }\n        if ('user' in data && Array.isArray(data.user)) {\n            return [data.user[0] as IAuditRatio, null]\n        }\n        return [null, new Error(\"'user_audit_ratio' key not in response\")]\n    }\n}\n"]}