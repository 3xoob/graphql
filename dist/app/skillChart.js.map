{"version":3,"file":"skillChart.js","sourceRoot":"","sources":["../../src/app/skillChart.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;AAElD,kEAAkE;AAClE,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACpC,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IAE5C,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,MAAM,cAAc,CAAC,mBAAmB,EAAE,CAAC;IAC/E,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;QACnB,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,GAAG,MAAM,cAAc,CAAC,sBAAsB,EAAE,CAAC;IACpF,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,IAAI,UAAU,GAAoB,IAAI,CAAC;IACvC,IAAI,OAAO,GAAoB,IAAI,CAAC;IACpC,IAAI,gBAAgB,EAAE,CAAC;QACnB,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QAChE,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,MAAM,GAAoB,IAAI,CAAC;IACnC,IAAI,GAAG,GAAoB,IAAI,CAAC;IAChC,IAAI,mBAAmB,EAAE,CAAC;QACtB,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;QAC3D,eAAe,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACjC,CAAC;AACL,CAAC;AAED,iCAAiC;AACjC,MAAM,UAAU,eAAe,CAAC,QAAkB,EAAE,MAAgB;IAChE,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC9C,IAAI,CAAC,GAAG,EAAE,CAAC;QACP,OAAO,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC9C,OAAO;IACX,CAAC;IAED,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAE3B,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC7C,MAAM,CAAC,SAAS,GAAG,WAAW,CAAC;IAE/B,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3C,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC;IAE7B,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QAC9C,KAAK,CAAC,WAAW,GAAG,qBAAqB,CAAC;IAC9C,CAAC;SAAM,CAAC;QACJ,KAAK,CAAC,WAAW,GAAG,kBAAkB,CAAC;IAC3C,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAE1B,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAChD,WAAW,CAAC,SAAS,GAAG,gBAAgB,CAAC;IACzC,WAAW,CAAC,WAAW,GAAG,6EAA6E,CAAC;IAExG,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrD,cAAc,CAAC,SAAS,GAAG,qBAAqB,CAAC;IAEjD,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC/C,QAAQ,CAAC,EAAE,GAAG,YAAY,CAAC;IAC3B,cAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAErC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACzB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC9B,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IAEjC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEjB,MAAM,OAAO,GAAG;QACZ,KAAK,EAAE;YACH,OAAO,EAAE;gBACL,IAAI,EAAE,KAAK;aACd;YACD,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,MAAM;SAChB;QACD,MAAM,EAAE,CAAC;gBACL,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,MAAM;aACf,CAAC;QACF,MAAM,EAAE,QAAQ;QAChB,WAAW,EAAE;YACT,KAAK,EAAE;gBACH,IAAI,EAAE,GAAG;gBACT,QAAQ,EAAE;oBACN,WAAW,EAAE,SAAS;oBACtB,IAAI,EAAE;wBACF,MAAM,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,CAAC;qBAC/D;iBACJ;gBACD,eAAe,EAAE,MAAM;gBACvB,WAAW,EAAE;oBACT,IAAI,EAAE,IAAI;iBACb;aACJ;SACJ;QACD,KAAK,EAAE;YACH,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,CAAC;YACb,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,GAAG;YACR,MAAM,EAAE;gBACJ,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE;oBACP,OAAO,EAAE,CAAC;gBACd,CAAC;aACJ;SACJ;QACD,MAAM,EAAE;YACJ,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,CAAC;YACR,MAAM,EAAE,CAAC,wBAAwB,CAAC;SACrC;QACD,IAAI,EAAE;YACF,OAAO,EAAE,GAAG;SACf;QACD,OAAO,EAAE;YACL,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,MAAM;YACb,MAAM,EAAE;gBACJ,UAAU,EAAE,CAAC,wBAAwB,CAAC;aACzC;YACD,KAAK,EAAE;gBACH,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,CAAC,SAAS,CAAC;aACtB;YACD,CAAC,EAAE;gBACC,SAAS,EAAE,UAAU,GAAW;oBAC5B,OAAO,GAAG,GAAG,GAAG,CAAC;gBACrB,CAAC;aACJ;SACJ;KACJ,CAAC;IAEF,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChD,KAAK,CAAC,MAAM,EAAE,CAAC;AACnB,CAAC","sourcesContent":["import ApexCharts from 'apexcharts';\nimport { GraphQLService } from './dataFetching';\nimport { processUserSkillsData } from './helpers';\n\n// Function to render both radar charts with the the required data\nexport async function renderSkillsCharts() {\n    const graphQLService = new GraphQLService();\n\n    const [userTechnologies, STerror] = await graphQLService.getUserTechnologies();\n    if (STerror !== null) {\n        console.error(STerror);\n    }\n\n    const [userTechnicalSkills, Serror] = await graphQLService.getUserTechnicalSkills();\n    if (Serror !== null) {\n        console.error(Serror);\n    }\n\n    let amountTECH: number[] | null = null;\n    let labTECH: string[] | null = null;\n    if (userTechnologies) {\n        [amountTECH, labTECH] = processUserSkillsData(userTechnologies);\n        renderChartCard(labTECH, amountTECH);\n    }\n\n    let amount: number[] | null = null;\n    let lab: string[] | null = null;\n    if (userTechnicalSkills) {\n        [amount, lab] = processUserSkillsData(userTechnicalSkills);\n        renderChartCard(lab, amount);\n    }\n}\n\n// Function to generate the chart\nexport function renderChartCard(labelsGp: string[], DataGp: number[]) {\n    const app = document.getElementById(\"lowDiv\");\n    if (!app) {\n        console.error(\"Profile container not found!\");\n        return;\n    }\n\n    const card = document.createElement('div');\n    card.className = 'cardSKG';\n\n    const header = document.createElement('div');\n    header.className = 'headerSKG';\n\n    const title = document.createElement('h2');\n    title.className = 'titleSKG';\n\n    if (labelsGp.some((str) => str.includes(\"css\"))) {\n        title.textContent = 'Technologies Skills';\n    } else {\n        title.textContent = 'Technical Skills';\n    }\n\n    header.appendChild(title);\n\n    const description = document.createElement('p');\n    description.className = 'descriptionSKG';\n    description.textContent = 'Here are your skills with the highest completion rate among all categories.';\n\n    const chartContainer = document.createElement('div');\n    chartContainer.className = 'chart-container-SKG';\n\n    const chartDiv = document.createElement('div');\n    chartDiv.id = 'radarChart';\n    chartContainer.appendChild(chartDiv);\n\n    card.appendChild(header);\n    card.appendChild(description);\n    card.appendChild(chartContainer);\n\n    app.append(card);\n\n    const options = {\n        chart: {\n            toolbar: {\n                show: false,\n            },\n            type: 'radar',\n            height: '100%',\n            width: '100%'\n        },\n        series: [{\n            name: 'Skills',\n            data: DataGp\n        }],\n        labels: labelsGp,\n        plotOptions: {\n            radar: {\n                size: 130,\n                polygons: {\n                    strokeColor: '#2e3c4c',\n                    fill: {\n                        colors: ['rgba(128, 0, 128, 0.5)', 'rgba(128, 0, 128, 0.7)']\n                    }\n                },\n                connectorColors: '#444',\n                radialLines: {\n                    show: true\n                }\n            }\n        },\n        yaxis: {\n            show: true,\n            tickAmount: 4,\n            min: 0,\n            max: 100,\n            labels: {\n                show: true,\n                formatter: function () {\n                    return \"\";\n                },\n            }\n        },\n        stroke: {\n            show: false,\n            width: 2,\n            colors: ['rgba(128, 0, 128, 0.7)']\n        },\n        fill: {\n            opacity: 0.6\n        },\n        tooltip: {\n            enabled: true,\n            theme: \"dark\",\n            marker: {\n                fillColors: ['rgba(128, 0, 128, 0.7)']\n            },\n            style: {\n                fontSize: '12px',\n                colors: ['#FFFFFF']\n            },\n            y: {\n                formatter: function (val: number) {\n                    return val + \"%\";\n                }\n            }\n        }\n    };\n\n    const chart = new ApexCharts(chartDiv, options);\n    chart.render();\n}\n"]}